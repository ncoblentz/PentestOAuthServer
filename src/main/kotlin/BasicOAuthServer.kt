//package com.nickcoblentz.mockoauthserver

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.main
import com.github.ajalt.clikt.parameters.options.*
import com.github.ajalt.clikt.parameters.types.boolean
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.clikt.parameters.types.int
import no.nav.security.mock.oauth2.MockOAuth2Server
import no.nav.security.mock.oauth2.token.DefaultOAuth2TokenCallback
import no.nav.security.mock.oauth2.OAuth2Config
import no.nav.security.mock.oauth2.http.MockWebServerWrapper
import kotlin.time.Duration.Companion.seconds
import java.io.File
import no.nav.security.mock.oauth2.http.Ssl
import no.nav.security.mock.oauth2.http.SslKeystore


class BasicOAuthServer : CliktCommand() {
    private var runServer = true
    private val port: Int by option().int().default(8082).help("Port to listen on, default 8082").check { it > 0 && it < 65536 }
    private val subject: String by option().default("").help("(Optional) Subject Value for the JWT, default: match the clientID/User identifier submitted to the service")
    private val claim: Map<String,String> by option().associate().help("(Optional) Additional claim(s) to Add to the JWT. Ex: --claim claim1=value1 --claim claim2=value2")
    private val useTls: Boolean by option().boolean().default(false).help("Use TLS?")
    private val tlsCertificate: File? by option().file(mustExist = true, mustBeReadable = true, mustBeWritable = false).help("Path to the certificate file")


    override fun run() {
        Runtime.getRuntime().addShutdownHook(Thread {
            println("Shutting down ...")
            runServer = false
        })


        //claims.entries.forEach { println("${it.key}=${it.value}") }

        val issuerId = "default"

        val server = if(useTls) {
            val tls = if(tlsCertificate!=null) {
                Ssl(
                    SslKeystore(
                        keyPassword = "",
                        keystoreFile = tlsCertificate!!,
                        keystorePassword = "",
                        //keystoreType = SslKeystore.KeyStoreType.PKCS12
                        keystoreType = SslKeystore.KeyStoreType.PKCS12
                    )
                )


            }
            else {
                Ssl()
            }

            val config = OAuth2Config(interactiveLogin = true, httpServer = MockWebServerWrapper(tls))
            MockOAuth2Server(config)
        }
        else {
            val config = OAuth2Config(interactiveLogin = true)
            MockOAuth2Server(config)
        }

        if(subject.isNotBlank())
            server.enqueueCallback(DefaultOAuth2TokenCallback(issuerId=issuerId,subject=subject,claims=claim))
        else
            server.enqueueCallback(DefaultOAuth2TokenCallback(issuerId=issuerId,claims=claim))

        val OAuthServerThread = Thread.ofVirtual().name("OAuth Server Thread").start(
            {
                server.start(port)
// Can be anything you choose - should uniquely identify your issuer if you have several

// Discovery url to authorization server metadata
                //val wellKnownUrl = server.wellKnownUrl(issuerId).toString()

                println("Well Known URL: ${server.wellKnownUrl(issuerId).toString()}")
                println("Issuer URL: ${server.issuerUrl(issuerId).toString()}")
                println("OAuth Metadata URL: ${server.oauth2AuthorizationServerMetadataUrl(issuerId).toString()}")
                println("jwks URL: ${server.jwksUrl(issuerId).toString()}")

                println("Authorization URL: ${server.authorizationEndpointUrl(issuerId).toString()}")
                println("Token URL: ${server.tokenEndpointUrl(issuerId).toString()}")
                println("End Session URL: ${server.endSessionEndpointUrl(issuerId).toString()}")
                println("Revocation URL: ${server.revocationEndpointUrl(issuerId).toString()}")
                println("UserInfo URL: ${server.userInfoUrl(issuerId).toString()}")


                // ......
                // Setup your app with metadata from wellKnownUrl and do your testing here
                // ......

                println("Use Control+C to shutdown the server")

                while (runServer) {
                    Thread.sleep(5.seconds.inWholeMilliseconds)
                }

                server.shutdown()
            })

        OAuthServerThread.join()


    }
}


fun main(args: Array<String>) = BasicOAuthServer().main(args)